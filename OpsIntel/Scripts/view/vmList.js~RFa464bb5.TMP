var plot;
var isGridLoaded = false;
var isTableLoad = false;
var tableLoad;
$(function () {
    var url = window.location.href;
    var rowId = parseInt(url.substring(url.indexOf("Id=") + 3).substring(0, 4));
   
});

$(document).ready(function () {
    $("#dialog-message").dialog({
        autoOpen: false,
        modal: true,
        width: 600,
        height: 550,
        open: function () {
            $('.ui-widget-overlay').bind('click', function () {
                $('#dialog').dialog('close');
            })
        },
        buttons: {
            "Update": function () {
                if ($("#txtVmName").val().trim() == "")
                {
                    $("#lblVmNameRequired").show();
                }
                var vmName = $("#txtVmName").val();
                var vmDescription = $("#txtVmDescription").val();
                var location = $("#txtLocation").val();
                var purpose = $("#txtPurpose").val();
                var imgFile = $("#txtimgFile").val();
                

            }
        }
    });
});
$("#lblVmNameRequired").hide();
$("#imgAdd").click(function () {
    
    $('#dialog-message').dialog('open');
});

$.ajax({
    url: '/api/Chart/GetVmNames/',
    type: 'GET',    
    data: 'json',
    success: function (res) {
        fnDisplayListOfVms(res);     
    },

});

function fnDisplayListOfVms(res) {
    $.each(res, function (index, value) {
        
        $("#vm" + index).text(value.VMName);
        var vmSelected = $("#lblvm" + index).innerHtml = value.Id;

        $("#vm" + index).click(function (event) {
            if (plot != null) {
                plot.destroy();
            }
            if (tableLoad != null) {
                tableLoad.destroy();
            }
            getVmUtilizationDataBasedOnId(vmSelected);
            getVMThresholdDataBasedOnId(vmSelected);
            getVMAllDetails(vmSelected);
           
        });

    });
}


function fontColorFormat(cellValue, options, rowObject) {
    var color = "blue";
    var cellHtml = "<span style='cursor:pointer; color:" + color + "' originalValue='" + cellValue + "'>" + cellValue + "</span>";
    return cellHtml;
}

var getVMAllDetails = function (id)
{
  
   var tableLoad1= $.ajax({
        url: '/Home/VMAllDetails/' + id,
        async:false,
        type: 'GET',
        dataType: "json",
        contentType: "application/json; charset=utf-8",
       
        success: function (data) {    
                $("#VMTable").append("<table><tr><td><br/><td></tr><tr><td>Machine_Details:<td></tr><tr><td><br/><td></tr><tr><td>Name:</td><td>" + data.Name + "</td><td>&nbsp;</td><td>CPU(s):</td><td>" + data.CPUs + "</td><td>&nbsp;&nbsp;&nbsp;</td><td width='50%'>Memory:</td><td>" + data.Memory + "</td></tr><tr><td><br/></td></tr><tr><td>Thresholds</td></tr><tr><td><br/></td></tr><tr><td>CPU:</td><td>" + data.ThresholdCPU + "</td><td>&nbsp&nbsp;&nbsp;&nbsp;&nbsp;</td><td>Memory:</td><td>" + data.ThresholdMemory + "</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td>DiskWrite:</td><td>" + data.DiskWrite + "</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td>DiskRead:</td><td>" + data.DiskRead + "</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td>NetworkIn:</td><td>" + data.NetworkIn + "</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td>NetworkOut:</td><td>" + data.NetworkOut + "</td></tr></table>");
        }
     
       
   });
   tableLoad = tableLoad1;
 
    //isTableLoad = true;
    //$.getJSON('/api/Home/VMAllDetails/' + id, function (data) {

    //         var items = '<fieldset><legend>Machine Details:</legend><table><tr><th>Name</th><th>CPUs</th><th>Memory</th><th>ThresholdCPU</th><th>ThresholdMemory</th><th>DiskWrite</th><th>DiskRead</th><th>NetworkIn</th><th>NetworkOut</th></tr>';
    //    $.each(data, function (i, country) {
    //        items += "<tr><td>" + country.Name + "</td><td>" + country.CPUs + "</td><td>" + country.Memory + "</td><td>" + country.ThresholdCPU + "</td><td>" + country.ThresholdMemory + "</td><td>" + country.DiskWrite + "</td><td>" + country.DiskRead + "</td><td>" + country.NetworkIn + "</td><td>" + country.NetworkOut + "</td></tr>";
    //    });
    //    items += "</table>";

    //    $('#grid1').html(items);

    //$.ajax({
    //    url: '/api/Home/VMAllDetails/' + id,
    //    type: "GET",
    //    success: function (data) {
    //        for (var i = 0; i < data.d.length; i++) {
    //            $("#VMTable").append("<tr><td>" + data.d[i].Name + "</td><td>" + data.d[i].CPUs + "</td><td>" + data.d[i].Memory + "</td><td>" + data.d[i].ThresholdCPU + "</td><td>" + data.d[i].ThresholdMemory + "</td><td>" + data.d[i].DiskWrite + "</td><td>" + data.d[i].DiskRead + "</td><td>" + data.d[i].NetworkIn + "</td><td>" + data.d[i].NetworkOut + "</td></tr>");
    //        }
    //    }
   
 

var getVMThresholdDataBasedOnId = function(id) 
{

    if (isGridLoaded) {
        $("#grid").setGridParam({ datatype: 'json' });
        $("#grid").setGridParam({ url: '/api/Chart/GetVmAutomationRuleDataBasedOnId/' + id });
        $("#grid").trigger("reloadGrid");
        $("#grid").setGridParam({ datatype: 'local' });
    }
    else {
        $("#grid").jqGrid({
            url: '/api/Chart/GetVmAutomationRuleDataBasedOnId/' + id,
            datatype: 'json',
            mtype: 'Get',
            colNames: ['Id', 'VMID', 'Utilization', 'Start Date', 'StartTime', 'EndDate', 'EndTime', 'Action', 'Value'],
            colModel: [
                { name: 'Id', index: 'Id', hidden: true },
                { name: 'VMID', index: 'VMID', editable: true },
                { name: 'UtilizationType', index: 'UtilizationType' },

                { name: 'StartDate', index: 'StartDate', formatter: 'date', formatoptions: { srcformat: 'Y-m-d', newformat: 'm/d/Y' } },
                { name: 'StartTime', index: 'StartTime' },
                { name: 'EndDate', index: 'EndDate', formatter: 'date', formatoptions: { srcformat: 'Y-m-d', newformat: 'm/d/Y' } },
                { name: 'EndTime', index: 'EndTime' },
                {
                    name: 'Action', index: 'Action',
                    editable: true,
                    edittype: 'select',
                    editoptions: { value: getAllActions() }
                },
                {
                    name: 'Value', index: 'Value',
                    editable: true,
                    edittype: 'select',
                    editoptions: { value: getAllValues() }
                }

            ],
            cellEdit: true,
            rowNum: 10,
            rowList: [10, 20, 30, 40],
            height: '50%',
            width: '100%',
            viewrecords: true,
            emptyrecords: 'No records to display',
            jsonReader: {
                vmU: "vmAutomationRule",
                repeatitems: false,
                Id: "0"
            },
            autowidth: true,
            multiselect: false,
            //loadComplete: function (data) {
            //    $("#vm0").click();

            //},
            loadonce: false,
            caption: "CPU Utilization Detail",
            cellsubmit: 'clientArray',
            editurl: 'clientArray'
        });

        isGridLoaded = true;
    }
}

var getVmUtilizationDataBasedOnId = function (id) {

    $.ajax({
        url: '/api/Chart/GetVmUtilizationDataBasedOnId/' + id,
        async:false,
        type: 'GET',
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function (result) {
                        
            testJqPlot(result, id);
        },
        error: function (a, b, c) {
            alert('An error occured');

        }
    });

    function testJqPlot(res, id) {        
        var data = [];
        $.each(res, function (index, value) {
            data.push([Date.parse(value.Date), value.CPUMaximum]);
        });
        var line1 = data;
        var plot2 = $.jqplot('chart1', [line1], {
            title: 'CPU Utilization Graph',
            axes: {
                xaxis: {
                    renderer: $.jqplot.DateAxisRenderer,
                    rendererOptions: {
                        tickRenderer: $.jqplot.CanvasAxisTickRenderer
                    },                  
                    pad: 0
                },
                yaxis: {
                    pad: 0
                }
            },
            series: [{
                lineWidth: 2,
                markerOptions: { style: 'filledCircle', size: 6 }
            }],
            highlighter: {
                show: true,
                sizeAdjust: 7.5
            },
            cursor: {
                show: true,
                tooltipLocation: 'sw'
            }
        });

        plot = plot2;
    }
}

function getAllValues() {
    var data;
    var options = new Object();
    $.ajax({
        url: '/api/Chart/GetVmValues',
        type: 'GET',
        dataType: "json",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: function (result) {
            data = result;
        },
        error: function (a, b, c) {
            alert('An error occured');

        }
    });

    for (var i = 0; i < data.length; i++) {
        options[data[i].Id] = data[i].ValuesName;
    }
    return options;
}

function getAllActions() {
    var data;
    var options = new Object();
    $.ajax({
        url: '/api/Chart/GetVmActions',
        type: 'GET',
        dataType: "json",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: function (result) {
            data = result;
        },
        error: function (a, b, c) {
            alert('An error occured');

        }
    });

    for (var i = 0; i < data.length; i++) {
        options[data[i].Id] = data[i].ActionName;
    }
    return options;
}

var GetVmUtilizationGraphBasedOnId = function (id) {
    $.ajax({
        url: '/api/Chart/GetVmUtilizationDataBasedOnId/' + id,
        type: 'GET',
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function (result) {

            GetJqPlot(result, id);
        },
        error: function (a, b, c) {
            alert('An error occured');

        }
    });

    function GetJqPlot(res, id) {
        var data = [];
        $.each(res, function (index, value) {
            data.push([Date.parse(value.Date), value.CPUMaximum]);
        });
        var line1 = data;
        var plot3 = $.jqplot('chart2', [line1], {
            title: 'CPU Utilization %',
            axes: {
                xaxis: {
                    renderer: $.jqplot.DateAxisRenderer,
                    tickOptions: { formatString: '%d-%m-%y%n%I:%M:%S %p' },
                    pad: 0
                },
                yaxis: {

                }
            },
            series: [{
                lineWidth: 2
            , markerOptions: { style: 'filledCircle', size: 6 }
            }],
            highlighter: {
                show: true,
                sizeAdjust: 7.5
            },
            cursor: {
                show: true,
                tooltipLocation: 'sw'
            }
        });

        plot = plot3;
    }

    $("#btnCancel").click(function (e) {
        window.close();
    });

    $("#btnSave").click(function (e) {
        SaveData();
    });

    var SaveData = function () {
        var data = $("#gridVmDetails").jqGrid('getRowData');
        var isValid = true;
        $.each(data, function (index, value) {
            if (value.Action.length > 10 || value.Value.length > 10) {
                alert('Value selected in the dropdown is not reflecting properly.');
                isValid = false;
            }
        });

        if (isValid) {
            $.ajax({
                url: '/api/Chart/PutData',
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    alert("Data successfully saved ");
                },
                error: function (a, b, c) {
                    alert('Error occured while performing the action');

                }
            });
        }
    }
}
